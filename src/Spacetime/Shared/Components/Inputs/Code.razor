@implements IDisposable
@inject IJSRuntime JS

<!-- figure out how to have dynamic sizes here -->
<div id='editor' name="@Name" @ref="_elementRef" style="height: 590px"></div>
@code {
    private IJSObjectReference? module;
    private bool _rendered;

    [Parameter]
    public string Name { get; set; }

    [Parameter]
    public string Data { get; set; }
    private ElementReference _elementRef;

    protected override async void OnAfterRender(bool firstRender)
    {
        if (_rendered)
        {
            // we don't need to re-initialize the editor after it's been
            // rendered once
            return;
        }

        try
        {

            module = await JS.InvokeAsync<IJSObjectReference>("import", "./editor.js");
            await module.InvokeVoidAsync("editor", _elementRef, Name, Data);
            _rendered = true;
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
        //await JS.InvokeVoidAsync("editor", _elementRef, Name, Data);
    }

    protected override async void OnParametersSet()
    {
        if (_rendered)
        {
            // update the editor whenever the parameter changes
            // only update once it's been rendered, though

            try
            {
                await UpdateEditor();
                //await JS.InvokeVoidAsync("updateEditor", _elementRef, Name, Data);
            }
            catch (Exception ex)
            {
                // todo: fall back to a basic editor?
            }
        }
    }

    public async ValueTask UpdateEditor() =>
        await module.InvokeVoidAsync("updateEditor", _elementRef, Name, Data);

    public async ValueTask Log(string message) => await module.InvokeVoidAsync("log", message);
    public void Dispose()
    {
        Console.WriteLine("disposing");
        //Log("disposing").GetAwaiter().GetResult();
    }
}
