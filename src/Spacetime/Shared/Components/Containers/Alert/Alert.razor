@using Spacetime.Shared.Components.Inputs
@using Spacetime.Shared.Icons
@if (IsVisible)
{
    <div class="top-0 h-screen w-screen absolute flex justify-center items-center">
        <div class="border rounded border-zinc-700 w-96 h-48 bg-zinc-900 shadow-xl p-5 divide-y divide-zinc-800 divide-solid text-white flex flex-col justify-between">
            <div>
                <div class="flex justify-between">
                    <h3 class="font-semibold text-2xl pb-3">@Title</h3>
                    <span @onclick="Close"><CloseIcon Css="cursor-pointer" /></span>
                </div>
                <div>@ChildContent</div>
            </div>
            <div class="pt-3">
                <Button ButtonType="ConfirmType"
                    ButtonSize="ButtonSize.Large"
                    OnClickCallback="@(() => OnConfirm(true))">
                    @(string.IsNullOrWhiteSpace(ConfirmText) ? "Confirm" : ConfirmText)
                </Button>
                <Button ButtonSize="ButtonSize.Large"
                    OnClickCallback="@(() => OnConfirm(false))">
                    Cancel
                </Button>
            </div>
        </div>
    </div>
}

@code {
    [Parameter]
    public string Title { get; set; }

    [Parameter]
    public object Data { get; set; }

    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    [Parameter]
    public bool IsVisible { get; set; }

    [Parameter]
    public EventCallback<bool> IsVisibleChanged { get; set; }

    [Parameter]
    public EventCallback<AlertCallbackArgs<object>> OnConfirmCallback { get; set; }

    // optional params
    [Parameter]
    public string? ConfirmText { get; set; }

    [Parameter]
    public ButtonType ConfirmType { get; set; } = ButtonType.Default;

    public async void OnConfirm(bool result)
    {
        Close();
        await OnConfirmCallback.InvokeAsync(new AlertCallbackArgs<object>(result, Data));
    }

    public async void Close()
    {
        IsVisible = false;
        await IsVisibleChanged.InvokeAsync(IsVisible);
    }
}
