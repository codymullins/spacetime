@using Spacetime.Core
@using Spacetime.Core.Services
@using Spacetime.Core.gRPC
@using Spacetime.Shared.Components
@using Spacetime.Shared.Components.Inputs
@using Spacetime.Shared.Components.Display
@using Spacetime.Shared.Icons
@using Spacetime.Shared.Components.Panes
@inject SpacetimeRestService SpacetimeRestService
@inject RequestService RequestService
@inject IGrpcExplorer GrpcExplorer

<div class="flex" style="overflow: hidden">
    <div class="basis-1/3 shrink-0">
        <div class="flex flex-row mb-2 shrink-0">
            <select name="method" @bind="Request.Method" class="bg-zinc-800" @onblur="Save">
                <option value="GET">GET</option>
                <option value="POST">POST</option>
            </select>
            <input class="px-4 py-2 w-5/6 border border-zinc-700 bg-zinc-800" placeholder="https://localhost:44301/api/tickets" type="text" @bind="Request.URL" @onblur="Save" />
            <Button OnClickCallback="@Execute">@ExecuteText</Button>
        </div>
        <div class="flex flex-row mb-2 border-bottom border-zinc-700">
            <Button>Body</Button>
            <Button>Auth</Button>
            <Button>Query</Button>
            <Button>Header</Button>
            <div class="flex flex-row ml-2">
                <button @onclick="() => SetGRPC(SpacetimeType.gRPC)"
                        class="border border-zinc-700 hover:border-zinc-600 hover:bg-zinc-600 px-2 py-1 rounded-l-sm mr-0 @(Request.Type == SpacetimeType.gRPC ? "bg-green-600" : "")">
                    gRPC
                </button>
                <button @onclick="() => SetGRPC(SpacetimeType.REST)"
                        class="border border-zinc-700 hover:border-zinc-600 hover:bg-zinc-600 px-2 py-1 rounded-r-sm ml-0 @(Request.Type != SpacetimeType.gRPC ? "bg-gray-600" : "")">
                    REST
                </button>
            </div>
        </div>
        <div class="ml-2">
            @if (Request.Type == SpacetimeType.gRPC)
            {
                <GrpcPane Request="@Request"/>
            }
            else
            {
                <Code Data="@string.Empty"></Code>
            }
        </div>
    </div>
    <div class="basis-2/3 ml-2">
        <div class="flex flex-row mb-2 border-bottom border-zinc-700">
            <div class="@StatusCodeBackground text-zinc-100 p-2">@Request.StatusCode</div>
            <div class="bg-zinc-600 text-zinc-100 p-2 ml-2">@Request.ResponseTimeText</div>
        </div>
        <div class="flex flex-row mb-2">
            <Button OnClickCallback="@(() => Tab = "preview")">Preview</Button>
            <Button OnClickCallback="@(() => Tab = "headers")">Headers</Button>
        </div>
        @if (Tab == "preview")
        {
            <div class="border border-zinc-700">
                <Code Data="@Request.ResponseBody"></Code>
            </div>
        }
        @if (Tab == "headers")
        {
            <HeadersPane Request="@Request"/>
        }
    </div>
</div>
@code {
    private async void SetGRPC(SpacetimeType type)
    {
        Request.Type = type;

        await Save();
    }

    private string Tab { get; set; } = "preview";
    private bool Loading { get; set; }

    private string StatusCodeBackground { get => Request?.Status == SpacetimeStatus.Ok ? "bg-green-600" : "bg-red-600"; }

    [Parameter]
    public SpacetimeRequest Request { get; set; }

    public GrpcExploreResult GrpcExploreResult { get; set; }
    private string ExecuteText => !Loading ? "Execute" : "Loading...";

    private void ValidateGrpc()
    {
        GrpcExploreResult = GrpcExplorer.GetExplorer(Request.ImportPath, Request.ProtoFile);
    }

    private async Task Save()
    {
        try
        {
            await RequestService.UpdateRequest(Request);
        }
        catch (Exception ex)
        {
            // todo: handle this? :-)
        }
    }

    private async Task Execute()
    {
        ClearResponse();

        if (string.IsNullOrWhiteSpace(Request.URL))
        {
            return;
        }

        try
        {
            // todo: move to DI configuration
            ISpacetimeService svc = Request.Type == SpacetimeType.gRPC ? new SpacetimeGrpcService() : SpacetimeRestService;
            Loading = true;

            var response = await svc.Execute(Request);

            Request.ResponseBody = response.ResponseBody;
            Request.ElapsedMs = response.ElapsedMs;
            Request.Headers = response.Headers;
            Request.Status = response.Status;
            Request.StatusCode = response.StatusCode;
        }
        catch (Exception ex)
        {
            Request.ResponseBody = $"Unknown error {ex.Message}";
        }
        finally
        {
            Loading = false;
        }

        await Save();
    }

    private void ClearAll()
    {
        Request.URL = string.Empty;
        Request.RequestBody = string.Empty;

        ClearResponse();
    }

    private void ClearResponse()
    {
        Request.ResponseBody = "No response.";
    }
}