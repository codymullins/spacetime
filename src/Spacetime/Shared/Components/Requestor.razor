@using Spacetime.Core
@using Spacetime.Core.Services
@using Spacetime.Core.gRPC
@using Spacetime.Shared.Components
@using Spacetime.Shared.Components.Inputs
@using Spacetime.Shared.Components.Containers.Tabs
@using Spacetime.Shared.Components.Display
@using Spacetime.Shared.Icons
@using Spacetime.Shared.Components.Panes
@using Spacetime.Shared.Components.Typography
@inject SpacetimeRestService SpacetimeRestService
@inject RequestService RequestService
@inject IGrpcExplorer GrpcExplorer

<div class="flex" style="overflow: hidden">
    <div class="basis-1/3 shrink-0">
        <div class="flex flex-row mb-2 shrink-0">
            @if (Request.Type == SpacetimeType.REST)
            {
                <select name="method" @bind="Request.Method" class="bg-zinc-800" @onblur="Save">
                    <option value="GET">GET</option>
                    <option value="POST">POST</option>
                </select>
            }
            else if (Request.Type == SpacetimeType.gRPC)
            {
                <span class="text-xs px-2 py-1">gRPC</span>
            }
            <input class="px-4 py-2 w-5/6 border border-zinc-700 bg-zinc-800" placeholder="https://localhost:44301/api/tickets" type="text" @bind="Request.URL" @onblur="Save" />
            <Button OnClickCallback="@Execute">@ExecuteText</Button>
        </div>
        <Tabs>
            <Tab Key="Body" CurrentTab="@RequestTab" OnClickCallback="@(() => RequestTab = "Body")">Body</Tab>
            <Tab Key="Headers" CurrentTab="@RequestTab" OnClickCallback="@(() => RequestTab = "Headers")">Headers</Tab>
            <Tab Key="Query" CurrentTab="@RequestTab" OnClickCallback="@(() => RequestTab = "Query")">Query</Tab>
        </Tabs>
        <TabContent Key="Body" CurrentTab="@RequestTab">
            @if (Request.Type == SpacetimeType.gRPC)
            {
                <GrpcPane Request="@Request" />
            }
            else
            {
                <Code Data="@string.Empty"></Code>
            }
        </TabContent>
        <TabContent Key="Query" CurrentTab="@RequestTab" Css="p-2">
            <table>
                <thead>
                    <tr>
                        <th class="text-left"><SmallCaps>Query Param</SmallCaps></th>
                        <th class="text-left"><SmallCaps>Value</SmallCaps></th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td class="py-2">
                            <input class="px-4 py-2 w-5/6 border border-zinc-700 bg-zinc-800" type="text" />
                        </td>
                        <td class="py-2">
                            <input class="px-4 py-2 w-5/6 border border-zinc-700 bg-zinc-800" type="text" />
                        </td>
                    </tr>
                    <tr>
                        <td class="py-2">
                            <input class="px-4 py-2 w-5/6 border border-zinc-700 bg-zinc-800" type="text" />
                        </td>
                        <td class="py-2">
                            <input class="px-4 py-2 w-5/6 border border-zinc-700 bg-zinc-800" type="text" />
                        </td>
                    </tr>
                </tbody>
            </table>
        </TabContent>
        <TabContent Key="Headers" CurrentTab="@RequestTab" Css="p-2">
            <table>
                <thead>
                    <tr>
                        <th class="text-left"><SmallCaps>Header</SmallCaps></th>
                        <th class="text-left"><SmallCaps>Value</SmallCaps></th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td class="py-2">
                            <input class="px-4 py-2 w-5/6 border border-zinc-700 bg-zinc-800" type="text" />
                        </td>
                        <td class="py-2">
                            <input class="px-4 py-2 w-5/6 border border-zinc-700 bg-zinc-800" type="text" />
                        </td>
                    </tr>
                    <tr>
                        <td class="py-2">
                            <input class="px-4 py-2 w-5/6 border border-zinc-700 bg-zinc-800" type="text" />
                        </td>
                        <td class="py-2">
                            <input class="px-4 py-2 w-5/6 border border-zinc-700 bg-zinc-800" type="text" />
                        </td>
                    </tr>
                </tbody>
            </table>
        </TabContent>
    </div>
    <div class="basis-2/3 ml-2">
        <div class="flex flex-row mb-2 border-bottom border-zinc-700 @(string.IsNullOrWhiteSpace(Request.StatusCode) ? "invisible" : "")">
            <div class="@StatusCodeBackground text-zinc-100 p-2">@Request.StatusCode</div>
            <div class="bg-zinc-600 text-zinc-100 p-2 ml-2">@Request.ResponseTimeText</div>
        </div>
        <Tabs>
            <Tab Key="Preview" CurrentTab="@ResponseTab" OnClickCallback="@(() => ResponseTab = "Preview")">Preview</Tab>
            <Tab Key="Headers" CurrentTab="@ResponseTab" OnClickCallback="@(() => ResponseTab = "Headers")">Headers</Tab>
        </Tabs>
        <TabContent Key="Preview" CurrentTab="@ResponseTab">
            <div class="border border-zinc-700">
                <Code Data="@Request.ResponseBody"></Code>
            </div>
        </TabContent>
        <TabContent Key="Headers" CurrentTab="@ResponseTab">
            <HeadersPane Request="@Request" />
        </TabContent>
    </div>
</div>
@code {
    private async void SetGRPC(SpacetimeType type)
    {
        Request.Type = type;

        await Save();
    }

    private string RequestTab { get; set; } = "Body";
    private string ResponseTab { get; set; } = "Preview";
    private bool Loading { get; set; }

    private string StatusCodeBackground { get => Request?.Status == SpacetimeStatus.Ok ? "bg-green-600" : "bg-red-600"; }

    [Parameter]
    public SpacetimeRequest Request { get; set; }

    public GrpcExploreResult GrpcExploreResult { get; set; }
    private string ExecuteText => !Loading ? "Execute" : "Loading...";

    private void ValidateGrpc()
    {
        GrpcExploreResult = GrpcExplorer.GetExplorer(Request.ImportPath, Request.ProtoFile);
    }

    private async Task Save()
    {
        try
        {
            await RequestService.UpdateRequest(Request);
        }
        catch (Exception ex)
        {
            // todo: handle this? :-)
        }
    }

    private async Task Execute()
    {
        ClearResponse();

        if (string.IsNullOrWhiteSpace(Request.URL))
        {
            return;
        }

        try
        {
            // todo: move to DI configuration
            ISpacetimeService svc = Request.Type == SpacetimeType.gRPC ? new SpacetimeGrpcService() : SpacetimeRestService;
            Loading = true;

            var response = await svc.Execute(Request);

            Request.ResponseBody = response.ResponseBody;
            Request.ElapsedMs = response.ElapsedMs;
            Request.Headers = response.Headers;
            Request.Status = response.Status;
            Request.StatusCode = response.StatusCode;
        }
        catch (Exception ex)
        {
            Request.ResponseBody = $"Unknown error {ex.Message}";
        }
        finally
        {
            Loading = false;
        }

        await Save();
    }

    private void ClearAll()
    {
        Request.URL = string.Empty;
        Request.RequestBody = string.Empty;

        ClearResponse();
    }

    private void ClearResponse()
    {
        Request.ResponseBody = "No response.";
    }
}