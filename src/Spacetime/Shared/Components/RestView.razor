@using Spacetime.Core
@using Spacetime.Core.Services
@using Spacetime.Core.gRPC
@using Spacetime.Shared.Components
@using Spacetime.Shared.Components.Inputs
@using Spacetime.Shared.Components.Containers.Tabs
@using Spacetime.Shared.Components.Display
@using Spacetime.Shared.Components.Panes
@using Spacetime.Core.Infrastructure;
@using Spacetime.Shared.Components.Typography
@inject SpacetimeRestService SpacetimeRestService
@inject RequestService RequestService
@inject IGrpcExplorer GrpcExplorer

<div class="grid gap-2 grid-cols-12">
    <div class="lg:col-span-6 sm:col-span-full">
        <div class="flex flex-row mb-2 shrink-0 gap-2">
            <MudSelect Margin="Margin.Dense" T="string"  Value="Request.Method" Variant="Variant.Outlined" @onchange="Save" Class="w-24">
                <MudSelectItem Value="@("GET")" />
                <MudSelectItem Value="@("POST")" />
            </MudSelect>
            <MudTextField Class="w-5/6"
            Margin="Margin.Dense"
                          @bind-Value="Request.URL"
                          Placeholder="https://localhost:44301/api/tickets"
                          Variant="Variant.Outlined"
                          @onblur="Save"
                          Adornment="Adornment.End" AdornmentIcon="@ExecuteIcon" OnAdornmentClick="Execute" />
        </div>
        <MudTabs Elevation="2" Rounded="true" ApplyEffectsToContainer="true">
            <MudTabPanel Text="Body">
                <Code Data="@Request.RequestBody" Name="RequestEditor"></Code>
            </MudTabPanel>
            <MudTabPanel Text="Query">
                <QueryParams @bind-Query="Request.QueryParams" />
            </MudTabPanel>
            <MudTabPanel Text="Headers">
                <RequestHeaders @bind-Headers="@Request.Headers" />
            </MudTabPanel>
        </MudTabs>
    </div>
    <div class="lg:col-span-6 sm:col-span-full">
        <div class="flex flex-row pb-3 @(string.IsNullOrWhiteSpace(Request.Response?.StatusCode) ? "invisible" : "")">
            <MudChip Color="Color.Success">@Request.Response?.StatusCode</MudChip>
            <MudChip Color="Color.Default">@Request.Response?.ResponseTimeText</MudChip>
        </div>

        <MudTabs Elevation="2" Rounded="true" ApplyEffectsToContainer="true" PanelClass="" >
            <MudTabPanel Text="Preview">
                <Code Data="@Request.Response?.ResponseBody" Name="ResponseEditor"></Code>
            </MudTabPanel>
            <MudTabPanel Text="Headers">
                <HeadersPane Request="@Request" />
            </MudTabPanel>
        </MudTabs>
    </div>
</div>
@code {
    // todo: validate this view is only for REST
    private string RequestTab { get; set; } = "Body";
    private string ResponseTab { get; set; } = "Preview";
    private bool Loading { get; set; }

    private BadgeType StatusCodeBadge { get => Request?.Response?.Status == SpacetimeStatus.Ok ? BadgeType.Success : BadgeType.Danger; }

    [Parameter]
    public SpacetimeRequest Request { get; set; }

    private string ExecuteIcon => !Loading ? Icons.Filled.Send : @Icons.Filled.Refresh;
    private string ExecuteText => !Loading ? "Execute" : "Loading...";

    private async Task Save()
    {
        try
        {
            await RequestService.UpdateRequest(Request);
        }
        catch (Exception ex)
        {
            // todo: handle this? :-)
        }
    }

    private async Task Execute()
    {
        ClearResponse();

        if (string.IsNullOrWhiteSpace(Request.URL))
        {
            return;
        }

        try
        {
            Loading = true;

            var response = await SpacetimeRestService.Execute(Request);

            Request.Response = response;
        }
        catch (Exception ex)
        {
            // todo: add logging / toasts
        }
        finally
        {
            Loading = false;
        }

        await Save();
    }

    private void ClearAll()
    {
        Request.URL = string.Empty;
        Request.RequestBody = string.Empty;

        ClearResponse();
    }

    private void ClearResponse()
    {
        Request.Response = new SpacetimeResponse();
    }
}