@using Spacetime.Core
@using Spacetime.Core.Services
@using Spacetime.Core.gRPC
@using Spacetime.Shared.Components
@using Spacetime.Shared.Components.Inputs
@using Spacetime.Shared.Components.Containers.Tabs
@using Spacetime.Shared.Components.Display
@using Spacetime.Shared.Icons
@using Spacetime.Shared.Components.Panes
@using Spacetime.Core.Infrastructure;
@using Spacetime.Shared.Components.Typography
@inject SpacetimeRestService SpacetimeRestService
@inject RequestService RequestService
@inject IGrpcExplorer GrpcExplorer

<div class="flex">
    <!-- todo: make this responsive / resizable -->
    <div style="width: 600px; height: 600px">
        <div class="flex flex-row mb-2 shrink-0 p-2">
            <select name="method" @bind="Request.Method" class="bg-zinc-800" @onblur="Save">
                <option value="GET">GET</option>
                <option value="POST">POST</option>
            </select>
            <input class="px-4 py-2 w-5/6 border border-zinc-700 bg-zinc-800" placeholder="https://localhost:44301/api/tickets" type="text" @bind="Request.URL" @onblur="Save" />
            <Button ButtonType="ButtonType.Primary" OnClickCallback="@Execute">@ExecuteText</Button>
        </div>
        <Tabs>
            <Tab Key="Body" CurrentTab="@RequestTab" OnClickCallback="@(() => RequestTab = "Body")">Body</Tab>
            <Tab Key="Headers" CurrentTab="@RequestTab" OnClickCallback="@(() => RequestTab = "Headers")">Headers</Tab>
            <Tab Key="Query" CurrentTab="@RequestTab" OnClickCallback="@(() => RequestTab = "Query")">Query</Tab>
        </Tabs>
        <TabContent Key="Body" CurrentTab="@RequestTab">
            <Code Data="@Request.RequestBody" Name="RequestEditor"></Code>
        </TabContent>
        <TabContent Key="Query" CurrentTab="@RequestTab" Css="p-2">
            <QueryParams @bind-Query="Request.QueryParams" />
        </TabContent>
        <TabContent Key="Headers" CurrentTab="@RequestTab" Css="p-2">
            <RequestHeaders @bind-Headers="@Request.Headers" />
        </TabContent>
    </div>
    <div style="width: 600px; height: 600px" class="ml-2">
        <div class="flex flex-row mb-2 border-bottom border-zinc-700 p-2 @(string.IsNullOrWhiteSpace(Request.Response?.StatusCode) ? "invisible" : "")">
            <Badge BadgeType="StatusCodeBadge">@Request.Response?.StatusCode</Badge>
            <Badge Css="ml-2">@Request.Response?.ResponseTimeText</Badge>
        </div>
        <Tabs>
            <Tab Key="Preview" CurrentTab="@ResponseTab" OnClickCallback="@(() => ResponseTab = "Preview")">Preview</Tab>
            <Tab Key="Headers" CurrentTab="@ResponseTab" OnClickCallback="@(() => ResponseTab = "Headers")">Headers</Tab>
        </Tabs>
        <TabContent Key="Preview" CurrentTab="@ResponseTab">
            <div class="border border-zinc-700">
                <Code Data="@Request.Response?.ResponseBody" Name="ResponseEditor"></Code>
            </div>
        </TabContent>
        <TabContent Key="Headers" CurrentTab="@ResponseTab">
            <HeadersPane Request="@Request" />
        </TabContent>
    </div>
</div>
@code {
    // todo: validate this view is only for REST
    private string RequestTab { get; set; } = "Body";
    private string ResponseTab { get; set; } = "Preview";
    private bool Loading { get; set; }

    private BadgeType StatusCodeBadge { get => Request?.Response?.Status == SpacetimeStatus.Ok ? BadgeType.Success : BadgeType.Danger; }

    [Parameter]
    public SpacetimeRequest Request { get; set; }

    private string ExecuteText => !Loading ? "Execute" : "Loading...";

    private async Task Save()
    {
        try
        {
            await RequestService.UpdateRequest(Request);
        }
        catch (Exception ex)
        {
            // todo: handle this? :-)
        }
    }

    private async Task Execute()
    {
        ClearResponse();

        if (string.IsNullOrWhiteSpace(Request.URL))
        {
            return;
        }

        try
        {
            Loading = true;

            var response = await SpacetimeRestService.Execute(Request);

            Request.Response = response;
        }
        catch (Exception ex)
        {
            // todo: add logging / toasts
        }
        finally
        {
            Loading = false;
        }

        await Save();
    }

    private void ClearAll()
    {
        Request.URL = string.Empty;
        Request.RequestBody = string.Empty;

        ClearResponse();
    }

    private void ClearResponse()
    {
        Request.Response = new SpacetimeResponse();
    }
}