@inherits Fluxor.Blazor.Web.Components.FluxorComponent

@using Spacetime.Core.gRPC

@inject SpacetimeRestService SpacetimeRestService
@inject RequestService RequestService
@inject IGrpcExplorer GrpcExplorer
@inject IDispatcher Dispatcher
@inject ILogger<RestView> Log
@inject IState<RequestState> RequestState

<style>
    .mud-tabs-panels {
        display: flex;
        flex-grow: 1;
    }</style>
<div class="grid gap-2 grid-cols-12 flex flex-col grow">
    <div class="lg:col-span-6 sm:col-span-full flex flex-col">
        <div class="flex flex-row mb-2 shrink-0 gap-2">
            <MudSelect T="string" Margin="Margin.Dense" T="string" Value="Request.Method" Variant="Variant.Outlined" ValueChanged="OnMethodChange" Class="w-24">
                <MudSelectItem Value="@("GET")" />
                <MudSelectItem Value="@("POST")" />
            </MudSelect>
            <MudTextField Class="w-5/6"
                          Margin="Margin.Dense"
                          @bind-Value="Request.URL"
                          Placeholder="https://localhost:44301/api/tickets"
                          Variant="Variant.Outlined"
                          @onblur="Save"
                          Adornment="Adornment.End" AdornmentIcon="@ExecuteIcon" OnAdornmentClick="Execute" />
        </div>
        <MudTabs Elevation="2" Rounded="true" ApplyEffectsToContainer="true" Class="flex grow">
            <MudTabPanel Text="Body" Class="flex">
                <Code @bind-Data="Request.RequestBody" Name="@RequestEditorName"></Code>
            </MudTabPanel>
            <MudTabPanel Text="Query">
                <QueryParams @bind-Query="Request.QueryParams" />
            </MudTabPanel>
            <MudTabPanel Text="Headers">
                <RequestHeaders @bind-Headers="@Request.Headers" />
            </MudTabPanel>
        </MudTabs>
    </div>
    <div class="lg:col-span-6 sm:col-span-full flex flex-col">
        <div class="flex flex-row pb-3 justify-between">
            <div class=" @(string.IsNullOrWhiteSpace(Request.Response?.StatusCode) ? "invisible" : "")">
                <MudChip Color="Color.Success">@Request.Response?.StatusCode</MudChip>
                <MudChip Color="Color.Default">@Request.Response?.ResponseTimeText</MudChip>
            </div>
            <div class="pr-5 pt-2"><MudIconButton Size="Size.Small" Icon="@Icons.Filled.Delete" OnClick="async () => { await OnDelete.InvokeAsync(Request); }" /></div>
        </div>

        <MudTabs Elevation="2" Rounded="true" ApplyEffectsToContainer="true" Class="flex grow">
            <MudTabPanel Text="Preview" Class="flex">
                <Code Data="@Request.Response?.ResponseBody" Name="@ResponseEditorName"></Code>
            </MudTabPanel>
            <MudTabPanel Text="Headers">
                <HeadersPane Headers="@Request.Response?.Headers" />
            </MudTabPanel>
        </MudTabs>
    </div>
</div>
@code {
    private Color StatusCodeBadge { get => Request?.Response?.Status == SpacetimeStatus.Ok ? Color.Success : Color.Error; }

    public SpacetimeRequest Request => RequestState.Value.SelectedRequest;

    [Parameter]
    public EventCallback<SpacetimeRequest> OnDelete { get; set; }

    public string RequestEditorName => $"RequestEditor";
    public string ResponseEditorName => $"ResponseEditor";

    private string ExecuteIcon => Request.Status != SpacetimeStatus.Active ? Icons.Filled.Send : @Icons.Filled.Refresh;
    private string ExecuteText => Request.Status != SpacetimeStatus.Active ? "Execute" : "Loading...";

    private void OnMethodChange(string method)
    {
        Request.Method = method;

        Save();
    }

    private void Save()
    {
        Dispatcher.Dispatch(new UpdateRequestAction(Request));
    }

    private void Execute()
    {
        if (string.IsNullOrWhiteSpace(Request.URL))
        {
            return;
        }

        Dispatcher.Dispatch(new ExecuteRequestAction(Request));


    }
}