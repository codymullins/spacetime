@using Spacetime.Core
@using Spacetime.Shared.Components.Typography
@using Spacetime.Shared.Components.Inputs
@using Spacetime.Core.Infrastructure;
<div class="flex flex-col p-2 w-full">
    <table>
        <thead>
        <tr>
            <th class="text-left p-2 w-96"><SmallCaps>Header</SmallCaps></th>
            <th class="text-left p-2 w-96"><SmallCaps>Value</SmallCaps></th>
            <th></th>
        </tr>
        </thead>
        <tbody>
        @foreach (var header in Headers)
        {
            <tr>
                <td class="py-2 w-96">
                    <input class="px-4 py-2 w-5/6 border border-zinc-700 bg-zinc-800" type="text" @bind="header.Name" />
                </td>
                <td class="py-2 w-96">
                    <input class="px-4 py-2 w-5/6 border border-zinc-700 bg-zinc-800" type="text" @bind="header.Value" />
                </td>
                <td>
                    <MudIconButton Icon="@Icons.Filled.Delete" OnClick="() => { Remove(header); }"/>
                </td>
            </tr>
        }
        @if (Headers == null || !Headers.Any())
        {
            <tr><td class="p-2 w-96" colspan="2">No headers</td></tr>
        }
        </tbody>
    </table>
    <MudButton OnClick="Add" Color="Color.Primary">Add header</MudButton>
</div>
@code {

    [Parameter]
    public List<HeaderDto> Headers { get; set; }
    [Parameter]
    public EventCallback<List<HeaderDto>> HeadersChanged { get; set; }
    public async void Remove(HeaderDto header)
    {
        Headers.Remove(header);
        await HeadersChanged.InvokeAsync(Headers);
    }

    public async void Add()
    {
        // todo: figure out how to 1. trigger edit event and 2. immediately force focus
        // when the user presses this button
        Headers.Add(new HeaderDto());
        await HeadersChanged.InvokeAsync(Headers);
    }
}
