@page "/grpc/{serviceId:int?}/{methodId:int?}"
@inherits Fluxor.Blazor.Web.Components.FluxorComponent

@using Spacetime.Blazor.gRPC.Components
@using Spacetime.Blazor.gRPC.Store
@using Spacetime.Core.gRPC
@using Spacetime.Core.gRPC.Interfaces

@inject IDialogService DialogService
@inject IProtobufService ProtobufService
@inject IDispatcher Dispatcher
@inject IState<GrpcState> State

<MudContainer MaxWidth="MaxWidth.ExtraExtraLarge" Style="padding: 0">
    <MudPaper Height="100%" Width="100%" Square="true" Class="mud-theme-primary">
        <MudPaper Class="mud-height-full" Style="overflow:hidden; position:relative;">
            <MudDrawerContainer Class="mud-height-full ">
                <MudDrawer @bind-Open="@open" Width="300px" Class="border-r border-solid" style="@($"border-color:{Theme.Swatch.Divider}")" Elevation="0" Variant="@DrawerVariant.Persistent" Color="Color.Dark">
                    <MudDrawerHeader>
                        <MudText Typo="Typo.h6">gRPC Services</MudText>
                    </MudDrawerHeader>
                    <div class="px-2 pb-2 flex justify-between">
                       
                        <MudButton OnClick=@OpenAddProtobuf><MudIcon Icon="@Icons.Filled.AddCircleOutline" /></MudButton>
                    </div>
                    <MudPaper>
                        <MudList Dense="true" Clickable="true">
                            @foreach (var svc in State.Value.Services)
                            {
                                <MudListItem Text="@svc.Name" InitiallyExpanded="false">
                                    <NestedList>
                                        @foreach (var method in svc.Methods)
                                        {
                                            <MudListItem Dense="true" Class="py-0">
                                                <MudNavLink Href="@($"/grpc/{svc.Id}/{method.Id}")">@method.Name</MudNavLink>
                                            </MudListItem>
                                        }
                                    </NestedList>
                                </MudListItem>
                            }
                        </MudList>
                    </MudPaper>
                </MudDrawer>
                <div class="d-flex flex-column mud-height-full pl-4">
                    <GrpcClient Service="@CurrentService" Method="@CurrentMethod" />
                </div>
            </MudDrawerContainer>
        </MudPaper>
    </MudPaper>
</MudContainer>

@code {
    bool open = true;

    void ToggleDrawer()
    {
        open = !open;
    }

    [Parameter]
    public int? ServiceId { get; set; }

    [Parameter]
    public int? MethodId { get; set; }

    public GrpcServiceDefinition? CurrentService { get; set; }
    public GrpcMethodDefinition? CurrentMethod { get; set; }

    protected override void OnInitialized()
    {
        Dispatcher.Dispatch(new FetchServicesAction());
    }

    protected override void OnParametersSet()
    {
        CurrentService = ServiceId != null ? State.Value.Services?.FirstOrDefault(p => p.Id == ServiceId.Value) : State.Value.Services?.FirstOrDefault();
        CurrentMethod = MethodId != null ? CurrentService?.Methods.FirstOrDefault(p => p.Id == MethodId) : CurrentService?.Methods.FirstOrDefault();
    }

    public async Task OpenAddProtobuf()
    {
        var options = new DialogOptions { MaxWidth = MaxWidth.Medium, FullWidth = true };
        var dialog = DialogService.Show<AddProtoDialog>("Add Protobuf", options);
        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            Dispatcher.Dispatch(new FetchServicesAction());
        }
    }
}
