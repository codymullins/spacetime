@page "/grpc"
@using Spacetime.Core
@using Spacetime.Core.gRPC
@using Spacetime.Core.Services
@using Spacetime.Shared.Components.Display
@using Spacetime.Shared.Components.Inputs
@using Spacetime.Core.Infrastructure;
@using Spacetime.Shared.Components.Typography
@using Spacetime.Shared.Components.Display.Table

@inject IProtobufService ProtobufService
@inject IDialogService DialogService
@inject IGrpcExplorer GrpcExplorer
@inject ISnackbar Snackbar

<div class="grid gap-1 grid-cols-12 flex flex-col">
    <div class="col-span-3 flex flex-col">
        <MudButton FullWidth="false" Class="justify-self-end" Color="Color.Secondary" OnClick="OpenAddProtobuf">Add Proto File</MudButton>

        <MudTreeView T="string" ExpandOnClick="true" @bind-SelectedValue="SelectedValue" Hover="true">
            @foreach (var svc in Services)
            {
                <MudTreeViewItem Value="@(svc.Name)">
                    @foreach (var method in svc.Methods)
                    {
                    <MudTreeViewItem Value="@(method.Name)" />
                    }
            </MudTreeViewItem>
            }
        </MudTreeView>
    </div>
    <div class="col-span-9 grid grid-cols-12 gap-2 flex flex-col grow">
        <div class="col-span-6">
            <MudTextField Margin="Margin.Dense"
                          @bind-Value="Service"
                          Placeholder="Service"
                          Variant="Variant.Outlined" />
            <MudTextField Margin="Margin.Dense"
                          @bind-Value="Method"
                          Placeholder="Method"
                          Variant="Variant.Outlined" />
        </div>
        <div class="col-span-6">
            <MudTextField Margin="Margin.Dense"
                          @bind-Value="URL"
                          Placeholder="grpc://localhost:80"
                          Variant="Variant.Outlined"
                          Adornment="Adornment.End" AdornmentIcon="@Icons.Filled.Send" OnAdornmentClick="Execute" />
        </div>
        <div class="col-span-6 grow flex flex-col">
            <div class="flex flex-row pb-3 justify-between">
                <MudChip Color="Color.Default">@SelectedValue</MudChip>
            </div>
            <Code @bind-Data="@Request" Name="GrpcRequestEditor" />
        </div>
        <div class="col-span-6 grow flex flex-col">
            <div class="flex flex-row pb-3 justify-between">
                <MudChip Color="Color.Default">@Response?.Status</MudChip>
                <MudChip Color="Color.Default">@(Response?.ElapsedMs)ms</MudChip>
            </div>
            <Code @bind-Data="@Response.ResponseBody" Name="GrpcResponseEditor" />
        </div>
    </div>

</div>

@code {
    private SpacetimeResponse Response { get; set; } = new SpacetimeResponse();
    public string Request { get; set; }
    public string URL { get; set; } = "https://localhost:7186";
    public string Service { get; set; } = "greet.Greeter";
    public string Method { get; set; } = "SayHello";
    string SelectedValue { get; set; }
    public GrpcServiceDefinition SelectedService { get; set; }
    public List<GrpcServiceDefinition> Services { get; set; } = new List<GrpcServiceDefinition>();
    protected override async Task OnInitializedAsync()
    {
        Services = (await ProtobufService.GetServiceDefinitions()).ToList();
    }

    public void SelectService(GrpcServiceDefinition service)
    {
        SelectedService = service;
    }

    public void OpenAddProtobuf()
    {
        var options = new DialogOptions { MaxWidth = MaxWidth.Medium, FullWidth = true };
        DialogService.Show<AddProtoDialog>("Add Protobuf", options);
    }

    private bool CanExecute()
    {
        if (string.IsNullOrWhiteSpace(Request) || string.IsNullOrWhiteSpace(Service) || string.IsNullOrWhiteSpace(Method))
        {
            return false;
        }

        return true;
    }

    public async Task Execute()
    {
        if (!CanExecute())
        {
            Snackbar.Add("Enter a request body, service, and method.", Severity.Error);
            return;
        }

        // todo: validate json
        Response = await GrpcExplorer.Invoke(URL, Service, Method, Request);
    }
}
