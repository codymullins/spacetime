@inherits Fluxor.Blazor.Web.Components.FluxorComponent
@page "/"

@using Spacetime.Core
@using Spacetime.Core.Services
@using Spacetime.Core.Infrastructure;

@inject IState<RequestState> RequestState
@inject IDispatcher Dispatcher
@inject IDialogService DialogService
@inject ILogger<Index> Log


<div class="grid gap-1 grid-cols-12 flex grow">
    <RequestList OnDelete="ConfirmDelete" />
    <div class="col-span-9 flex flex-col">
        @if (RequestState.Value.SelectedRequest?.Type == SpacetimeType.REST)
        {
            <RestView OnDelete="ConfirmDelete"/>
        }
        else
        {
            <div class="mx-4 my-4">Select a request or create a new one to get started.</div>
        }
    </div>
</div>
@code {
    public string SearchText { get; set; }
    private List<SpacetimeRequest> Requests { get; set; }

    protected override Task OnInitializedAsync()
    {
        Dispatcher.Dispatch(new FetchRequestsAction());
        return Task.CompletedTask;
    }

    public async Task ConfirmDelete(SpacetimeRequest request)
    {
        var parameters = new DialogParameters();
        parameters.Add("ContentText", "Do you really want to delete this request? This process cannot be undone.");
        parameters.Add("ButtonText", "Delete");
        parameters.Add("Color", Color.Error);

        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };

        var dialog = DialogService.Show<Dialog>("Delete", parameters, options);
        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            Dispatcher.Dispatch(new DeleteRequestAction(request.Id));
        }
    }

    private void Save(SpacetimeRequest request)
    {
        Dispatcher.Dispatch(new UpdateRequestAction(request));
    }
}