@page "/"

@using Spacetime.Core
@using Spacetime.Core.Services
@using Spacetime.Core.Infrastructure;
@using Spacetime.Shared.Components
@using Spacetime.Shared.Components.Display
@using Spacetime.Shared.Components.Inputs
@using Spacetime.Shared.Components.Containers.Alert
@using Spacetime.Shared.Components.Containers.Modal
@using Spacetime.Shared.Icons
@using Spacetime.Shared.Components.Typography
@inject RequestService RequestService

<div class="grid gap-1 grid-cols-12">
    <div class="border-r border-zinc-700 col-span-3">
        @if (Requests == null)
        {
            <p><em>Loading...</em></p>
        }
        else
        {
            <div class="px-2 pb-2 flex justify-between">
                <SmallCaps>Requests</SmallCaps>
                <Button OnClickCallback=@NewRequest><PlusCircle /></Button>
            </div>
            <ul>
                @if (!Requests.Any())
                {
                    <ListItem OnClickCallback=@NewRequest>
                        <Title>
                            <div class="px-4 py-2">
                                No requests
                            </div>
                        </Title>
                    </ListItem>
                }
                @foreach (var req in Requests)
                {
                    <ListItem OnClickCallback="@(e => CurrentRequest = req)" Css="@(CurrentRequest?.Id == req.Id ? "bg-zinc-700" : "")"
                      OnActionCallback="@(async e => await OnDelete(req))">
                        <Title>
                            <input class="px-4 py-2 border border-transparent hover:border-transparent bg-zinc-800" type="text" @bind="@req.Name" @onblur="async () => await Save(req)" />
                        </Title>
                        <Prefix><span class="text-xs px-2 py-1">@GetRequestPrefix(req)</span></Prefix>
                        <ActionTemplate>
                            <Dropdown Items="@RequestDropdown" OnClickCallback="@(() => ConfirmDelete(req))"><DotsVerticalIcon /></Dropdown>
                        </ActionTemplate>
                    </ListItem>
                }
            </ul>
        }
    </div>
    <div class="col-span-9">
        @if (CurrentRequest?.Type == SpacetimeType.REST)
        {
            <RestView Request="@CurrentRequest" />
        }
        else if (CurrentRequest?.Type == SpacetimeType.gRPC)
        {
            <GrpcView Request="@CurrentRequest" />
        }
        else
        {
            <div class="mx-4 my-4">Select a request or create a new one to get started.</div>
        }
    </div>
    <Modal Title="New Request" @bind-IsVisible="@ModalVisible"
           CancelText="Cancel">
        <div class="flex justify-center gap-4">
            <Card OnClickCallback="() => CreateNewRequest(SpacetimeType.REST)" Css="w-56 h-32 cursor-pointer text-center flex flex-col gap-4 justify-between">
                <span class="font-semibold text-xl">REST</span>
                <p class="text-sm">Make an HTTP request using REST</p>
                <p class="text-sm"><a class="text-cyan-400 hover:underline" href="#">Learn more</a></p>
            </Card>
            <Card OnClickCallback="() => CreateNewRequest(SpacetimeType.gRPC)" Css="w-56 h-32 cursor-pointer text-center flex flex-col gap-4 justify-between">
                <span class="font-semibold text-xl">gRPC</span>
                <p class="text-sm">Make a request using gRPC</p>
                <p class="text-sm"><a class="text-cyan-400 hover:underline" href="#">Learn more</a></p>
            </Card>
        </div>
    </Modal>
    <Alert Title="Are you sure?"
           Data="SelectedRequest"
           ConfirmText="Delete request"
           ConfirmType="ButtonType.Danger"
           OnConfirmCallback="OnConfirmDeleteCallback"
           @bind-IsVisible="AlertVisible">
        <p>Are you sure you want to delete request <span class="italic font-bold">@SelectedRequest.GetName()</span>?</p>
    </Alert>
</div>
@code {
    public bool AlertVisible { get; set; }
    public bool ModalVisible { get; set; }
    private List<string> RequestDropdown { get => new List<string> { "Delete" }; }
    private SpacetimeRequest CurrentRequest { get; set; }
    private SpacetimeRequest SelectedRequest { get; set; }
    private List<SpacetimeRequest> Requests { get; set; }
    protected override async Task OnInitializedAsync()
    {
        Requests = (await RequestService.GetRequests()).ToList();
        if (CurrentRequest == null && Requests.Any())
        {
            CurrentRequest = Requests.First();
        }

    }

    public void ConfirmDelete(SpacetimeRequest request)
    {
        SelectedRequest = request;
        AlertVisible = true;
    }

    public async void OnConfirmDeleteCallback(AlertCallbackArgs<object> args)
    {
        var request = args.Data as SpacetimeRequest;

        if (args.Confirm && request != null)
        {
            await OnDelete(request);
        }
    }

    private string GetRequestPrefix(SpacetimeRequest req)
    {
        var str = string.Empty;
        switch (req.Type)
        {
            case SpacetimeType.REST:
                str = req.Method;
                break;
            case SpacetimeType.gRPC:
                str = "gRPC";
                break;
            default:
                str = req.Method;
                break;
        }

        return str;
    }

    private void NewRequest()
    {
        ModalVisible = true;
    }

    private void CreateNewRequest(SpacetimeType type)
    {
        ModalVisible = false;
        var req = new SpacetimeRequest();
        req.Name = "New Request";
        req.Type = type;
        req.Method = "GET";
        Requests.Add(req);
        CurrentRequest = req;
        RequestService.AddRequest(req);
    }

    private async Task OnDelete(SpacetimeRequest request)
    {
        var index = Requests.IndexOf(request);
        if (index > 0)
        {
            // set the current request to the preceding
            CurrentRequest = Requests[index - 1];
        }
        else if (Requests.TakeLast(1).First() != request)
        {
            // if this isn't the last one, set current request to the next one
            CurrentRequest = Requests[index + 1];
        }
        else
        {
            CurrentRequest = null;
        }

        Requests.Remove(request);
        RequestService.DeleteRequest(request.Id);
    }

    private async Task Save(SpacetimeRequest request)
    {
        try
        {
            await RequestService.UpdateRequest(request);
        }
        catch (Exception ex)
        {
            // todo: handle this?
        }
    }
}