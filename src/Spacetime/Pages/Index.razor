@page "/"
@using Spacetime.Blazor.Sortable
@using Spacetime.Core
@using Spacetime.Core.Services
@using Spacetime.Core.Infrastructure;
@using Spacetime.Shared.Components
@using Spacetime.Shared.Components.Display
@using Spacetime.Shared.Components.Inputs
@using Spacetime.Shared.Components.Typography
@inject RequestService RequestService
@inject Sortable Sortable
@inject IDialogService DialogService

<div class="grid gap-1 grid-cols-12 flex grow">
    <div class="border-r border-zinc-700 col-span-3">
        @if (Requests == null)
        {
            <p><em>Loading...</em></p>
        }
        else
        {
            <div class="px-2 pb-2 flex justify-between">
                <SmallCaps>Requests</SmallCaps>
                <MudButton OnClick=@NewRequest><MudIcon Icon="@Icons.Filled.AddCircleOutline" /></MudButton>
            </div>
            @if (!Requests.Any())
            {
                <ul>
                    <ListItem OnClickCallback=@NewRequest>
                        <Title>
                            <div class="px-4 py-2">
                                No requests
                            </div>
                        </Title>
                    </ListItem>
                </ul>
            }
            @if (Items.Any())
            {
                <SortableList Items="Items" OnItemSelected="OnItemSelected" />
            }
        }
    </div>
    <div class="col-span-9 flex flex-col">
        @if (CurrentRequest?.Type == SpacetimeType.REST)
        {
            <RestView Request="@CurrentRequest" />
        }
        else if (CurrentRequest?.Type == SpacetimeType.gRPC)
        {
            <GrpcView Request="@CurrentRequest" />
        }
        else
        {
            <div class="mx-4 my-4">Select a request or create a new one to get started.</div>
        }
    <Spacetime.Shared.Components.Panes.Terminal />

    </div>
</div>
@code {
    private List<string> RequestDropdown { get => new List<string> { "Delete" }; }
    private SpacetimeRequest CurrentRequest { get; set; }
    private List<SpacetimeRequest> Requests { get; set; }
    private List<SortableListItem> Items => Requests != null
    ? Requests.Select(p => new SortableListItem { Id = p.Id, Value = p.Name, Prefix = GetRequestPrefix(p) }).ToList()
    : new List<SortableListItem>();

    private ElementReference _ref { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Requests = (await RequestService.GetRequests()).ToList();
        if (CurrentRequest == null && Requests.Any())
        {
            CurrentRequest = Requests.First();
        }

    }

    public void OnItemSelected(SortableListItem item)
    {
        CurrentRequest = Requests.FirstOrDefault(p => p.Id == item.Id);
    }

    public async Task ConfirmDelete(SpacetimeRequest request)
    {
        var parameters = new DialogParameters();
        parameters.Add("ContentText", "Do you really want to delete this request? This process cannot be undone.");
        parameters.Add("ButtonText", "Delete");
        parameters.Add("Color", Color.Error);

        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };

        var dialog = DialogService.Show<Dialog>("Delete", parameters, options);
        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            await OnDelete(request);
        }
    }

    private string GetRequestPrefix(SpacetimeRequest req)
    {
        var str = string.Empty;
        switch (req.Type)
        {
            case SpacetimeType.REST:
                str = req.Method;
                break;
            case SpacetimeType.gRPC:
                str = "gRPC";
                break;
            default:
                str = req.Method;
                break;
        }

        return str;
    }

    private async Task NewRequest()
    {
        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true };
        var dialog = DialogService.Show<NewRequestModal>("New Request", options);
        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            var data = result.Data as NewRequestModal.NewRequestModalResult;
            var req = new SpacetimeRequest();
            req.Name = string.IsNullOrWhiteSpace(data.RequestName) ? "New Request" : data.RequestName;
            req.Type = data.Type;
            req.Method = "GET";
            Requests.Add(req);
            CurrentRequest = req;
            await RequestService.AddRequest(req);
        }
    }

    private async Task OnDelete(SpacetimeRequest request)
    {
        var index = Requests.IndexOf(request);
        if (index > 0)
        {
            // set the current request to the preceding
            CurrentRequest = Requests[index - 1];
        }
        else if (Requests.TakeLast(1).First() != request)
        {
            // if this isn't the last one, set current request to the next one
            CurrentRequest = Requests[index + 1];
        }
        else
        {
            CurrentRequest = null;
        }

        Requests.Remove(request);
        RequestService.DeleteRequest(request.Id);
    }

    private async Task Save(SpacetimeRequest request)
    {
        try
        {
            await RequestService.UpdateRequest(request);
        }
        catch (Exception ex)
        {
            // todo: handle this?
        }
    }
}