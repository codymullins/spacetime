@page "/"

@using Spacetime.Core
@using Spacetime.Core.Services
@using Spacetime.Shared.Components
@using Spacetime.Shared.Components.Display
@using Spacetime.Shared.Components.Inputs
@using Spacetime.Shared.Icons
@inject RequestService RequestService

<div class="flex flex-row">
    <div class="border-r border-zinc-700 mr-2 shrink-0">
        @if (Requests == null)
        {
            <p><em>Loading...</em></p>
        }
        else
        {
            <div class="p-2 flex justify-between">
                <strong>Requests</strong>
                <Button OnClickCallback=@NewRequest>New</Button>
            </div>
            <ul>
                @foreach (var req in Requests)
                {
                    <ListItem OnClickCallback="@(e => CurrentRequest = req)"
                      OnActionCallback="@(async e => await OnDelete(req))">
                        <Title><input class="px-4 py-2 border border-zinc-700 hover:border-transparent bg-zinc-800" type="text" @bind="@req.Name" @onblur="async () => await Save(req)" /></Title>
                        <ActionTemplate><DeleteIcon /></ActionTemplate>
                    </ListItem>
                }
            </ul>
        }
    </div>
    @if (CurrentRequest != null)
    {
        <Spacetime.Shared.Components.Requestor Request="@CurrentRequest" />
    } else
    {
        <p>Select a request</p>
    }
</div>
@code {
    private SpacetimeRequest CurrentRequest { get; set; }
    private List<SpacetimeRequest> Requests { get; set; }
    protected override async Task OnInitializedAsync()
    {
        Requests = (await RequestService.GetRequests()).ToList();

    }

    private void NewRequest()
    {
        var req = new SpacetimeRequest();
        req.Name = "New Request";
        Requests.Add(req);
        CurrentRequest = req;
        RequestService.AddRequest(req);
    }

    private async Task OnDelete(SpacetimeRequest request)
    {
        Requests.Remove(request);
        RequestService.DeleteRequest(request.Id);
    }
    
    private async Task Save(SpacetimeRequest request)
    {
        try
        {
            await RequestService.UpdateRequest(request);
        }
        catch (Exception ex)
        {
            // todo: handle this?
        }
    }
}