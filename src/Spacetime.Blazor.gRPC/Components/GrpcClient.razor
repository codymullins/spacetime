@inherits Fluxor.Blazor.Web.Components.FluxorComponent

@using Fluxor
@using Spacetime.Blazor.gRPC.Store
@inject IProtobufService ProtobufService
@inject IDialogService DialogService
@inject IGrpcExplorer GrpcExplorer
@inject ISnackbar Snackbar
@inject IState<GrpcState> GrpcState
@inject IDispatcher Dispatcher

<MudGrid Class="d-flex flex-grow-1">
    <MudItem sm="12" md="3" class="flex-grow-0">
        <MudButton FullWidth="false" Class="justify-self-end" Color="Color.Secondary" OnClick="OpenAddProtobuf">Add Proto File</MudButton>
        <ServiceExplorer @bind-ActivatedValue="ActivatedValue" />
    </MudItem>
    <MudItem sm="12" md="9" Class="d-flex flex-column">
        <MudGrid Class="d-flex">
            <MudItem xs="3">
                <MudTextField Margin="Margin.Dense"
                              Value="GrpcState.Value.SelectedRequest?.Method"
                              Placeholder="Method"
                              Disabled="true"
                              Variant="Variant.Outlined" />
            </MudItem>
            <MudItem xs="3">
                <MudTextField Margin="Margin.Dense"
                              @bind-Value="URL"
                              Placeholder="http://localhost:80"
                              Variant="Variant.Outlined"
                              Adornment="Adornment.End" AdornmentIcon="@Icons.Filled.Send" OnAdornmentClick="Execute" />
            </MudItem>
            <MudItem xs="3">
                <div class="flex flex-row">
                    <MudChip Color="Color.Default">@Response?.Status</MudChip>
                    <MudChip Color="Color.Default">@(Response?.ElapsedMs)ms</MudChip>
                </div>
            </MudItem>
        </MudGrid>
        <MudGrid Class="d-flex flex-grow-1">
            <MudItem sm="12" md="6" Class="d-flex">
                <GrpcRequest DarkMode="DarkMode" @bind-Request="Request" />
            </MudItem>
            <MudItem sm="12" md="6" Class="d-flex">
                <GrpcResponse DarkMode="DarkMode" @bind-Response="Response" />
            </MudItem>
        </MudGrid>
    </MudItem>
</MudGrid>
@code {
    [Parameter]
    public bool DarkMode { get; set; }
    private SpacetimeResponse Response { get; set; } = new SpacetimeResponse();
    public string Request { get; set; }
    public string URL { get; set; } = "https://localhost:7186";

    protected override async Task OnInitializedAsync()
    {
        Dispatcher.Dispatch(new ShowRequestAction("greet.Greeter", "greet.Greeter.SayHello"));
    }

    private ServiceExplorer.TreeItemData ActivatedValue { get; set; }

    public void OpenAddProtobuf()
    {
        var options = new DialogOptions { MaxWidth = MaxWidth.Medium, FullWidth = true };
        DialogService.Show<AddProtoDialog>("Add Protobuf", options);
    }

    private bool CanExecute()
    {
        var valid = true;

        if (string.IsNullOrWhiteSpace(Request))
        {
            Snackbar.Add("Request body is required.", Severity.Error);
            valid = false;
        }

        var method = GrpcState.Value.SelectedRequest?.Method;
        if (string.IsNullOrWhiteSpace(method))
        {
            Snackbar.Add("Select a gRPC Method", Severity.Error);
            valid = false;
        }
        else
        {
            var split = method.Split(".", StringSplitOptions.RemoveEmptyEntries);
            if (split.Count() != 3)
            {
                Snackbar.Add($"Select a method for service {method}", Severity.Error);
                valid = false;
            }
        }

        return valid;
    }

    public async Task Execute()
    {
        if (!CanExecute())
        {
            return;
        }

        var request = GrpcState.Value.SelectedRequest;

        // todo: validate json
        var split = request.Method.Split(".", StringSplitOptions.RemoveEmptyEntries);
        var service = $"{split[0]}.{split[1]}";
        var method = split[2];
        var grpcResponse = await GrpcExplorer.Invoke(URL, service, method, Request);
        Response = new SpacetimeResponse
            {
                ElapsedMs = grpcResponse.ElapsedMs,
                ResponseBody = grpcResponse.ResponseBody,
                Status = (SpacetimeStatus)grpcResponse.Status
            };
    }
}
