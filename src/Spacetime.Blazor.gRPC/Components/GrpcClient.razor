@inject IProtobufService ProtobufService
@inject IDialogService DialogService
@inject IGrpcExplorer GrpcExplorer
@inject ISnackbar Snackbar

<div class="grid gap-1 grid-cols-12 flex flex-col">
    <div class="col-span-3 flex flex-col">
        <MudButton FullWidth="false" Class="justify-self-end" Color="Color.Secondary" OnClick="OpenAddProtobuf">Add Proto File</MudButton>

        <MudPaper Width="300px" Elevation="0">
            <MudTreeView Items="TreeItems" MultiSelection="false" @bind-ActivatedValue="ActivatedValue">
                <ItemTemplate>
                    <MudTreeViewItem @bind-Expanded="@context.IsExpanded" Items="@context.TreeItems" Value="@context"
                                     Icon="@context.Icon" Text="@context.Title" EndText="@context.Number?.ToString()" EndTextTypo="@Typo.caption" />
                </ItemTemplate>
            </MudTreeView>
        </MudPaper>
    </div>
    <div class="col-span-9 grid grid-cols-12 gap-2 flex flex-col grow">
        <div class="col-span-6">
            <MudTextField Margin="Margin.Dense"
                          Value="ActivatedValue?.Title"
                          Placeholder="Method"
                          Disabled="true"
                          Variant="Variant.Outlined" />
        </div>
        <div class="col-span-6">
            <MudTextField Margin="Margin.Dense"
                          @bind-Value="URL"
                          Placeholder="http://localhost:80"
                          Variant="Variant.Outlined"
                          Adornment="Adornment.End" AdornmentIcon="@Icons.Filled.Send" OnAdornmentClick="Execute" />
        </div>
        <div class="col-span-6 grow flex flex-col">
            <Code DarkMode="DarkMode" @bind-Data="@Request" Name="GrpcRequestEditor" />
        </div>
        <div class="col-span-6 grow flex flex-col">
            <div class="flex flex-row pb-3 justify-between">
                <MudChip Color="Color.Default">@Response?.Status</MudChip>
                <MudChip Color="Color.Default">@(Response?.ElapsedMs)ms</MudChip>
            </div>
            <Code DarkMode="DarkMode" @bind-Data="@Response.ResponseBody" Name="GrpcResponseEditor" />
        </div>
    </div>

</div>
@code {
    [Parameter]
    public bool DarkMode { get; set; }
    private SpacetimeResponse Response { get; set; } = new SpacetimeResponse();
    public string Request { get; set; } = string.Empty;
    public string URL { get; set; } = "https://localhost:7186";
    

    private TreeItemData ActivatedValue { get; set; }

    private HashSet<TreeItemData> SelectedValues { get; set; }

    private HashSet<TreeItemData> TreeItems { get; set; } = new HashSet<TreeItemData>();

    public List<GrpcServiceDefinition> Services { get; set; } = new List<GrpcServiceDefinition>();
    protected override async Task OnInitializedAsync()
    {
        Services = (await ProtobufService.GetServiceDefinitions()).ToList();

        foreach (var svc in Services)
        {
            var children = new HashSet<TreeItemData>()
            {
            };

            foreach (var method in svc.Methods)
            {
                children.Add(new TreeItemData(method.Name, Icons.Filled.FilePresent)
                {
                    Parent = svc.Name
                });
            }

            var data = new TreeItemData(svc.Name, Icons.Filled.Folder, svc.Methods.Count);
            data.TreeItems = children;

            TreeItems.Add(data);
        }
    }

    public void OpenAddProtobuf()
    {
        var options = new DialogOptions { MaxWidth = MaxWidth.Medium, FullWidth = true };
        DialogService.Show<AddProtoDialog>("Add Protobuf", options);
    }

    private bool CanExecute()
    {
        var valid = true;

        if (string.IsNullOrWhiteSpace(Request))
        {
            Snackbar.Add("Request body is required.", Severity.Error);
            valid = false;
        }

        if (ActivatedValue == null)
        {
            Snackbar.Add("Select a gRPC Method", Severity.Error);
            valid = false;
        }

        if (ActivatedValue != null)
        {
            var split = ActivatedValue.Title?.Split(".", StringSplitOptions.RemoveEmptyEntries);
            if (split.Count() != 3)
            {
                Snackbar.Add($"Select a method for service {ActivatedValue.Title}", Severity.Error);
                valid = false;
            }
        }

        return valid;
    }

    public async Task Execute()
    {
        if (!CanExecute())
        {
            return;
        }

        // todo: validate json
        var split = ActivatedValue.Title?.Split(".", StringSplitOptions.RemoveEmptyEntries);
        var service = $"{split[0]}.{split[1]}";
        var method = split[2];
        var grpcResponse = await GrpcExplorer.Invoke(URL, service, method, Request);
        Response = new SpacetimeResponse
        {
            ElapsedMs = grpcResponse.ElapsedMs,
            ResponseBody = grpcResponse.ResponseBody,
            Status = (SpacetimeStatus) grpcResponse.Status
        };
    }

    public class TreeItemData
    {
        public string Parent { get; set; }
        public string Title { get; set; }
        public string Type { get; set; }
        public string Icon { get; set; }

        public int? Number { get; set; }

        public bool IsExpanded { get; set; }

        public HashSet<TreeItemData> TreeItems { get; set; }

        public TreeItemData(string title, string icon, int? number = null)
        {
            Title = title;
            Icon = icon;
            Number = number;
        }
    }

}
