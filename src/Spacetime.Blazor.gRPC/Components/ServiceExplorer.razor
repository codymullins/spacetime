@using Spacetime.Blazor.gRPC.Store
@using Fluxor
@inherits Fluxor.Blazor.Web.Components.FluxorComponent

@inject IProtobufService ProtobufService
@inject IDispatcher Dispatcher

<MudPaper Elevation="0">
    <MudTreeView Items="TreeItems" MultiSelection="false" @bind-ActivatedValue="BoundValue">
        <ItemTemplate>
            <MudTreeViewItem @bind-Expanded="@context.IsExpanded" Items="@context.TreeItems" Value="@context"
                             Icon="@context.Icon" Text="@context.Title" EndText="@context.Number?.ToString()" EndTextTypo="@Typo.caption" />
        </ItemTemplate>
    </MudTreeView>
</MudPaper>

@code {
    [Parameter]
    public TreeItemData ActivatedValue { get; set; }
    
    [Parameter]
    public EventCallback<TreeItemData> ActivatedValueChanged { get; set; }

    private HashSet<TreeItemData> SelectedValues { get; set; }

    private HashSet<TreeItemData> TreeItems { get; set; } = new HashSet<TreeItemData>();
    
    public List<GrpcServiceDefinition> Services { get; set; } = new List<GrpcServiceDefinition>();

    private TreeItemData BoundValue
    {
        get => ActivatedValue;
        set
        {
            if (!string.IsNullOrWhiteSpace(value?.Parent))
            {
                // this is a method
                Dispatcher.Dispatch(new ShowRequestAction(value.Parent, value.Title));
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        // todo: move to fluxor
        Services = (await ProtobufService.GetServiceDefinitions()).ToList();

        foreach (var svc in Services)
        {
            var children = new HashSet<TreeItemData>()
            {
            };

            foreach (var method in svc.Methods)
            {
                children.Add(new TreeItemData(method.Name, Icons.Filled.FilePresent)
                {
                    Parent = svc.Name
                });
            }

            var data = new TreeItemData(svc.Name, Icons.Filled.Folder, svc.Methods.Count);
            data.TreeItems = children;

            TreeItems.Add(data);
        }
    }

    public class TreeItemData
    {
        public string Parent { get; set; }
        public string Title { get; set; }
        public string Type { get; set; }
        public string Icon { get; set; }

        public int? Number { get; set; }

        public bool IsExpanded { get; set; }

        public HashSet<TreeItemData> TreeItems { get; set; }

        public TreeItemData(string title, string icon, int? number = null)
        {
            Title = title;
            Icon = icon;
            Number = number;
        }
    }
}